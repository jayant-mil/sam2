# This module handles visualization of video streams using CV2
# It also accepts masks and keypoints for overlaying on the video stream.
# These masks and keypoints are generated by other modules.
# Masks can be soft or hard, points, boxes or polygons.

import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import random

colormap = ['blue','orange','green','purple','brown','pink','gray','olive','cyan','red',
            'lime','indigo','violet','aqua','magenta','coral','gold','tan','skyblue']

def draw_polygons(image, prediction, fill_mask=False):  
    """  
    Draws segmentation masks with polygons on an image.  
  
    Parameters:  
    - image_path: Path to the image file.  
    - prediction: Dictionary containing 'polygons' and 'labels' keys.  
                  'polygons' is a list of lists, each containing vertices of a polygon.  
                  'labels' is a list of labels corresponding to each polygon.  
    - fill_mask: Boolean indicating whether to fill the polygons with color.  
    """  
    # Load the image  
   
    draw = ImageDraw.Draw(image)  
      
   
    # Set up scale factor if needed (use 1 if not scaling)  
    scale = 1  
      
    # Iterate over polygons and labels  
    for polygons, label in zip(prediction['polygons'], prediction['labels']):  
        color = random.choice(colormap)  
        fill_color = random.choice(colormap) if fill_mask else None  
          
        for _polygon in polygons:  
            _polygon = np.array(_polygon).reshape(-1, 2)  
            if len(_polygon) < 3:  
                print('Invalid polygon:', _polygon)  
                continue  
              
            _polygon = (_polygon * scale).reshape(-1).tolist()  
              
            # Draw the polygon  
            if fill_mask:  
                draw.polygon(_polygon, outline=color, fill=fill_color)  
            else:  
                draw.polygon(_polygon, outline=color)  
              
            # Draw the label text  
            draw.text((_polygon[0] + 8, _polygon[1] + 2), label, fill=color)  
  
    return image

def draw_points(image, prediction, marker_size=20):
    draw = ImageDraw.Draw(image)
    coords = prediction['coords']
    labels = prediction['labels']
    pos_points = coords[labels==1]
    neg_points = coords[labels==0]
    for point in pos_points:
        draw.ellipse([point[0]-marker_size/2, point[1]-marker_size/2, point[0]+marker_size/2, point[1]+marker_size/2], fill='green', outline='white')
    for point in neg_points:
        draw.ellipse([point[0]-marker_size/2, point[1]-marker_size/2, point[0]+marker_size/2, point[1]+marker_size/2], fill='red', outline='white')
    return image

def draw_boxes(image, prediction):
    draw = ImageDraw.Draw(image)
    boxes = prediction['boxes']
    for box in boxes:
        draw.rectangle(box, outline='green')
    return image